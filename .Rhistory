Database5 <- read.table("C:/Users/Admin/OneDrive/MTE/Robomate Contact Center/Database5.accdb", quote="\"")
View(Database5)
available.packages()
install.packages("slidify")
install.packages("slidify")
find.package("devtools")
install.packages("devtools")
find_rtools()
library("devtools")
find_rtools()
install.packages(c("car", "caret", "colorspace", "DBI", "digest", "ggplot2", "gtable", "lme4", "lubridate", "mnormt", "nlme", "plyr", "psych", "quantreg", "Rcpp", "RcppEigen", "reshape2", "roxygen2", "scales", "SparseM", "stringi", "stringr"))
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find.package("devtools")
find_rtools()
find_rtools()
find_rtools()
find_rtools()
find_rtools()
find_rtools()
install.packages("devtools")
library(devtools)
find_rtools()
installpackages("Kernsmooth")
installpackage("Kernsmooth")
install.packages(KernSmooth)
"KernSmooth"
packageDescription(""KernSmooth"")
packageDescription(""KernSmooth")
packageDescription("KernSmooth")
library("KernSmooth")
install.packages("swirl")
library("swirl")
swirl()
swirl()
5+7
x <- 5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
z<-c(z,555)
z<-c(z,555,z)
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div=z/my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
help("read.csv")
swirl()
library(swirl)
rm(list=ls())
swirl()
5+7
x<=5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
Z*2+100
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
True==True
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5=7
5!=7
5!==7
!(5==7)
False&False
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
ISTRUE(6>4)
isTRUE (6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
library(swirl)
rm(list=ls())
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit
submit()
remainder(5)
remainer(11,5)
remainder(11,5)
remainer(divisor=11, num=5)
remainder(divisor=11, num=5)
remainer(4,div=2)
remainder(4,div=2)
args(remainder)
submit()
submit()
sd(c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(dat)]},c(8,4,0))
evaluate(function(x){x[length(c(8,4,0))]},c(8,4,0))
info()
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","Ã¯s","fun!")
paste("Programming", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
submit()
submit()
telegram("hello world")
submit()
submit()
mad_libs(place="India",adjective="best",noun="country")
submit()
submit()
submit()
'I'%p%'love'%p%'R!'
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d,%Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units='days')
source('C:/Users/Admin/OneDrive/Personal/R/John Hopkins/Week2Course2/corr_1.R')
source("corr_1.R")
source("corr_1.R")
mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$mpg,mtcars$cyl,cor)
corr(mtcars$mpg,mtcars$cyl)
cor(mtcars$mpg,mtcars$cyl)
summary(mtcars$mpg)
max(mtcars$mpg)
??quartile
quantile(mtcars$mpg,1/4)
mtcars$mpg[mtcars$mpg>quantile(mtcars$mpg,1/4)&mtcars$mpg<quantile(mtcars$mpg,3/4),]
mtcars[mtcars$mpg>quantile(mtcars$mpg,1/4)&mtcars$mpg<quantile(mtcars$mpg,3/4),]
?ggplot
?gplot
??ggplot
mtcars[mtcars$mpg>quantile(mtcars$mpg,1/8)&mtcars$mpg<quantile(mtcars$mpg,7/8),]
stdev
??standarddeviation
?sd
mtcars[mtcars$mpg>mean(mtcars$mpg)-2*std(mtcars$mpg)&mtcars$mpg<mean(mtcars$mpg)+2*std(mtcars$mpg),]
mtcars[mtcars$mpg>(mean(mtcars$mpg)-2*std(mtcars$mpg))&(mtcars$mpg<mean(mtcars$mpg)+2*std(mtcars$mpg)),]
mtcars[mtcars$mpg>(mean(mtcars$mpg)-2*sd(mtcars$mpg))&(mtcars$mpg<mean(mtcars$mpg)+2*sd(mtcars$mpg)),]
sd(mtcars$mpg)
tapply(mtcars$mpg,mtcars$cyl,fun()mtcars[mtcars$mpg>(mean(mtcars$mpg)-2*sd(mtcars$mpg))&(mtcars$mpg<mean(mtcars$mpg)+2*sd(mtcars$mpg)),])
tapply(mtcars$mpg,mtcars$cyl,fun(){mtcars[mtcars$mpg>(mean(mtcars$mpg)-2*sd(mtcars$mpg))&(mtcars$mpg<mean(mtcars$mpg)+2*sd(mtcars$mpg)),])}
??annonymous function
??anonymous function
?anonymous
??anonymous
??annonymous
mtcars[!mtcars$mpg %in% mtcars.stats(mtcars$mpg)$out]
?stats
library(help = "stats")
setwd("C:/Users/Admin/OneDrive/Personal/R/John Hopkins/Week3Course2/ProgrammingAssignment2")
source("cachematrix.R")
newmatrix<-c(1:10,2,5)
newmatrix
newmatrix<-c(1:10,nrows=2,nrows=5)
newmatrix
newmatrix<-matrix(1:10,nrows=2,nrows=5)
newmatrix<-matrix(1:10,nrow=2,ncol=5)
newmatrix
makeCacheMatrix(newmatrix)
getmatrix
getmatrix()
newmatrix.get()
makeCacheMatrix(newmatrix).get()
makeCacheMatrix.get()
makeCacheMatrix(newmatrix).set()
makeCacheMatrix().set()
mmat<-makeCacheMatrix()
mmat$set(newmatrix)
mmat$get()
mmat$getmatrix()
mmat$setmatrix(3.4)
mmat$setmatrix(matrix(1:10,nrow=1,ncol=10))
source("cachematrix.R")
mmat$setmatrix(matrix(1:10,nrow=1,ncol=10))
source("cachematrix.R")
mmat$getmatrix()
listnames
listnames()
mmat<-makeCacheMatrix()
x<-matrix(1:10,nrow=2,ncol=5)
mmat$set(x)
mmat$get(x)
mmat$get()
mmat$getmatrix()
mmat$setmatrix(x)
mmat$getmatrix()
cacheSolve(mmat)
i
mmat$setmatrix()
mmat$setmatrix("")
cacheSolve(mmat)
i
rm(list=ls())
source("cachematrix.R")
mmat<-makeCacheMatrix()
x<-matrix(1:16,nrow=4,ncol=4)
mmat$set(x)
mmat$get(x)
mmat$get()
cacheSolve(mmat)
i
data
?solve
source("cachematrix.R")
cacheSolve(mmat)
i
data
x<-matrix(1:10,nrow=2,ncol=5)
mmat$set(x)
cacheSolve(mmat)
i
data
x<-matrix(1:9,nrow=3,ncol=3)
mmat$set(x)
cacheSolve(mmat)
i
data
source("cachematrix.R")
source("cachematrix.R")
x<-matrix(1:9,nrow=3,ncol=3)
mmat$set(x)
cacheSolve(mmat)
i
det(data)
x<-matrix(1:25,nrow=5,ncol=5)
mmat$set(x)
cacheSolve(mmat)
i
data
mmat$getmatrix()
cacheSolve(mmat)
i
x<-matrix(data = rexp(196, rate = 10), nrow = 14, ncol = 14)
x
mmat$set(x)
cacheSolve(mmat)
i
data
cacheSolve(mmat)
i
x<-matrix(1:25,nrow=5,ncol=5)
mmat$set(x)
cacheSolve(mmat)
i
source("cachematrix.R")
x<-matrix(1:25,nrow=5,ncol=5)
mmat$set(x)
cacheSolve(mmat)
cacheSolve(mmat)
